--3
CREATE OR REPLACE VIEW HIGHEST_BALANCE_RB AS
SELECT * FROM
(SELECT P.PATIENT_ID, P.NAME, P.ADDRESS, B.DATE_BILL, B.TOTAL, TOTAL_BY_COST_CENTER(100,B.BILL_ID) AS TOTAL_ROOM_BOARD
FROM PATIENTS P
JOIN BILLS B
ON B.PATIENT_ID = P.PATIENT_ID
ORDER BY TOTAL_ROOM_BOARD DESC) 
WHERE ROWNUM = 1;

SELECT * FROM HIGHEST_BALANCE_RB;


--4.a
CREATE OR REPLACE FUNCTION TOTAL_BY_COST_CENTER(cost_centerid number, billid number) RETURN DECIMAL IS
    rpta DECIMAL := 0;
BEGIN
    SELECT SUM (IT.PRICE) into rpta
    FROM BILLS B 
    JOIN BILL_DETAILS BD
    ON BD.BILL_ID = B.BILL_ID
    JOIN ITEMS IT
    ON IT.ITEM_ID = BD.ITEM_ID
    WHERE B.BILL_ID = billid AND IT.COST_CENTER_ID = cost_centerid;
    
    IF rpta is null THEN
        rpta := 0;
    END IF;
    
    RETURN rpta;
END;

SELECT TOTAL_BY_COST_CENTER(100,1) FROM DUAL;

--4.b
CREATE OR REPLACE FUNCTION QUANTITY_BY_COST_CENTER(cost_centerid number, billid number) RETURN NUMBER IS
    rpta NUMBER;
BEGIN
    SELECT COUNT(IT.PRICE) into rpta
    FROM BILLS B 
    JOIN BILL_DETAILS BD
    ON BD.BILL_ID = B.BILL_ID
    JOIN ITEMS IT
    ON IT.ITEM_ID = BD.ITEM_ID
    WHERE B.BILL_ID = billid AND IT.COST_CENTER_ID = cost_centerid;
    
    RETURN rpta;
END;

SELECT QUANTITY_BY_COST_CENTER(100,1) FROM DUAL;



--SE REALIZA PUNTO 5, CREACIÓN DE VISTA USANDO LAS FUNCIONES CREADAS ANTERIORMENTE

 --5   
CREATE OR REPLACE VIEW INFORMATION_OF_BILLS AS
SELECT P.PATIENT_ID, P.NAME, P.ADDRESS, B.DATE_BILL, B.DATE_ADMITED, B.DATE_DISCHARGE,
    QUANTITY_BY_COST_CENTER(100,B.BILL_ID) AS TOTAL_ITEMS_ROOM_BOARD, TOTAL_BY_COST_CENTER(100,B.BILL_ID) AS BALANCE_ROOM_AND_BOARD,
    QUANTITY_BY_COST_CENTER(110,B.BILL_ID) AS TOTAL_ITEMS_LABORATORY, TOTAL_BY_COST_CENTER(110,B.BILL_ID) AS BALANCE_LABORATORY, 
    QUANTITY_BY_COST_CENTER(125,B.BILL_ID) AS TOTAL_ITEMS_RADIOLOGY, TOTAL_BY_COST_CENTER(125,B.BILL_ID) AS BALANCE_RADIOLOGY
FROM PATIENTS P
JOIN BILLS B
ON B.PATIENT_ID = P.PATIENT_ID;

SELECT * FROM INFORMATION_OF_BILLS;


--7
ALTER TABLE ITEMS ADD UNITS_AVAILABLE NUMBER;


--8
CREATE OR REPLACE TRIGGER UPDATE_ITEM_UNITS AFTER INSERT ON BILL_DETAILS
FOR EACH ROW
BEGIN
    UPDATE ITEMS IT SET UNITS_AVAILABLE = UNITS_AVAILABLE - 1 WHERE IT.ITEM_ID = :NEW.ITEM_ID;
END;


--9
CREATE OR REPLACE PROCEDURE INCREASE_CURR_PRICE_ITEMS AS
	NEW_CURRENT_PRICE ITEMS.PRICE%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Start execution...');		
  
	FOR ITEM IN (SELECT IT.ITEM_ID, CC.DESCRIPTION, IT.PRICE, CC.COST_CENTER_ID FROM ITEMS IT
                  JOIN COST_CENTERS CC 
                  ON IT.COST_CENTER_ID = CC.COST_CENTER_ID
                  WHERE CC.COST_CENTER_ID IN (100, 110, 125))
	LOOP
		IF(ITEM.DESCRIPTION IN ('Room '||chr(38)||' Board')) THEN
        NEW_CURRENT_PRICE := ITEM.PRICE * 1.02; --EQ 0.02
			ELSE IF(ITEM.DESCRIPTION IN ('Laboratory')) THEN
          NEW_CURRENT_PRICE := ITEM.PRICE * 1.035; --EQ 0.03
				ELSE
					NEW_CURRENT_PRICE := ITEM.PRICE * 1.04; --EQ 0.05
			END IF;
		END IF;
        
        DBMS_OUTPUT.PUT_LINE('EL VALOR ANTERIOR ES: ' ||ITEM.PRICE|| ' Y EL ACTUAL ES: ' ||NEW_CURRENT_PRICE);
	
		UPDATE ITEMS IT SET PRICE = NEW_CURRENT_PRICE WHERE IT.ITEM_ID = ITEM.ITEM_ID;
	END LOOP;
	
	DBMS_OUTPUT.PUT_LINE('ACTUALIZACIÓN EXITOSA');		
END;

EXECUTE INCREASE_CURR_PRICE_ITEMS;
